################################################################################
# Makefile to build a KFLog release based on Linux and Qt5.x
#
# Copyright (c): 2010-2023 by Axel Pauli (kflog.cumulus@gmail.com)
# 
# This file is distributed under the terms of the General Public License.
#
# See the file COPYING for more information.
#
################################################################################

# Version is determined from the header file target.h
VERSION=$(shell cat kflog/target.h | grep KFLOG_VERSION | cut -d '"' -f 2)

# Current Linux release, used in package name
DIST_NAME=$(shell lsb_release -s -i)
DIST_REL=$(shell lsb_release -s -r)
KFLOG_REL=kflog-$(VERSION)

ARCHITECTURE=$(shell dpkg --print-architecture)

# Debian package build directories
KFLOG_DEB_ROOT=dpkg/$(DIST_NAME)
KFLOG_DEB=$(KFLOG_DEB_ROOT)/$(KFLOG_REL)

QT_VERSION=$(shell qmake -query QT_VERSION)
QT_BINS=$(shell qmake -query QT_INSTALL_BINS)
QT_LRELEASE=$(QT_BINS)/lrelease
QT_TRANSLATIONS=$(shell qmake -query QT_INSTALL_TRANSLATIONS)

# Qt5 translation files, which are referenced by qt_de.qm.
QT5_TL_FILES= \
  qtbase_de.qm \
  qtscript_de.qm \
  qtquick1_de.qm \
  qtmultimedia_de.qm \
  qtxmlpatterns_de.qm

# Reset language environment because the date can be formatted according
# to local rules. That does not like dpkg-buildpackage.
LANG=

DATE=$(shell date +'%a, %d %b %Y %H:%M:%S %z')

# adapt install path to your needs if necessary
INSTALL_ROOT = /opt/kflog

# dh_make tool version 0.58 requires option '-r old' to get working right
ifeq "$(shell dh_make -v | grep -c 'version 0\.58')" "1"
	DH_MAKE_OPT=-r old
endif

usage:
	@echo ""
	@echo "KFLog build environment for Linux/X11 and Qt$(QT_VERSION)"
	@echo ""
	@echo "Installed Qt version $(QT_VERSION)"
	@echo ""
	@echo "Call \"make -f Makfile.qmake ...\" with one of the listed targets"
	@echo "  all          - build all KFLog parts"
	@echo "  install_test - installs a test release under the directory release"
	@echo "  clean        - cleans the build area"
	@echo "  distclean    - cleans the build and release area"
	@echo "  dpkg         - builds a Debian package under the directory dpkg"
	
all:	resetdate
	qmake -Wall -nocache kflog.pro
	make -f Makefile all

.PHONY :	resetdate
resetdate:
	rm -f kflog/main.o

.PHONY : qmake
qmake:
	qmake -Wall -nocache kflog.pro
  
install_test: all
	make INSTALL_ROOT=$(shell pwd)/release -f Makefile install
	make INSTALL_ROOT=$(shell pwd)/release -f Makefile.qmake install_lang

.PHONY : install_lang
install_lang:
	@echo "===== Installing KFLog $(VERSION) languages ====="
	@install --mode=755 -d $(INSTALL_ROOT)/translations
	@cd kflog; \
		$(QT_LRELEASE) -silent -removeidentical -nounfinished kflog_de.ts -qm $(INSTALL_ROOT)/translations/kflog_de.qm
	@chmod 644 $(INSTALL_ROOT)/translations/kflog_de.qm
	@echo "===== Installing QT translations ====="
	@install --mode=644 $(QT_TRANSLATIONS)/qt_de.qm $(INSTALL_ROOT)/translations/qt_de.qm
ifneq ($(word 1,$(subst ., ,$(QT_VERSION))),4)
	# Installing Qt5 translation files
	@cd $(QT_TRANSLATIONS); \
	  install --mode=644 $(QT5_TL_FILES) $(INSTALL_ROOT)/translations
endif
	
clean:	qmake
	make -f Makefile clean

# distclean is necessary to call, if a qmake project file has been modified!	
distclean:	qmake
	make -f Makefile distclean
	rm -rf `pwd`/release
	
##################################################
# call dpkg target to build a debian KFLog package
##################################################

.PHONY : dpkg dpkg_prepare dpkg_make dpkg_build

dpkg:
	@echo "===== Building a Debian package for KFLog $(VERSION) ====="
	@$(MAKE) -f Makefile.qmake VERSION=$(VERSION) dpkg_prepare dpkg_make dpkg_build

# This target prepares the Debian build. A fresh copy of KFLog is cheched out
# from subversion. Therefore you need subversion access!
dpkg_prepare:
	@rm -fr $(KFLOG_DEB_ROOT)/*$(VERSION)*
	@mkdir -p $(KFLOG_DEB)
	@echo "Get KFLog master branch from GitHub as zip file"
	@cd $(KFLOG_DEB); \
	  wget -nv https://github.com/kflog-project/KFLog/archive/master.zip; \
	  unzip -qq master.zip; \
	  cp -rp KFLog-master/. .; \
	  rm -rf KFLog-master master.zip

# This target creates the debian package files. It is called via another makefile
# due to the VERSION macro. The special letters apostroph and quotation mark
# cause problems in other shell commands, if they not expanded before.
dpkg_make:
	cd $(KFLOG_DEB); \
	export DEBEMAIL='kflog.cumulus@gmail.com'; \
	export DEBFULLNAME='Axel Pauli'; \
	echo '\n' | dh_make --packagename $(KFLOG_REL) -c GPL -s --native $(DH_MAKE_OPT)
	cd $(KFLOG_DEB)/dpkg/control; \
	cp control rules prerm postinst ../../debian/; \
	sed -e "s/__VERSION__/$(VERSION)/g" -e "s/__DATE__/$(DATE)/g" copyright > ../../debian/copyright; \
	sed -e "s/__VERSION__/$(VERSION)/g" -e "s/__DATE__/$(DATE)/g" changelog > ../../debian/changelog
	
# This target builds the debian package, if all is prepared before.
dpkg_build:
	cd $(KFLOG_DEB); \
	dpkg-buildpackage -rfakeroot -b -us -uc

# Copies all files of KFLog into the debian package area. It is called by the
# Debian rule file.
.PHONY : dpkg_install

dpkg_install:
	@echo '===== Installing KFLog $(VERSION) under $(DESTDIR)/$(INSTALL_ROOT)'
	install --mode=755 -d $(DESTDIR)/$(INSTALL_ROOT)/bin
	install --mode=755 -d $(DESTDIR)/$(INSTALL_ROOT)/lib
	install --mode=755 -d $(DESTDIR)/$(INSTALL_ROOT)/logger
	install --mode=755 -d $(DESTDIR)/$(INSTALL_ROOT)/pics
	install --mode=755 -d $(DESTDIR)/$(INSTALL_ROOT)/translations
	install --mode=755 -d $(DESTDIR)/usr/share/applications
	install --mode=644 kflog/pics/pilot_48.png $(DESTDIR)/$(INSTALL_ROOT)/pics
	install --mode=644 kflog/kflog.desktop $(DESTDIR)/usr/share/applications
	install --mode=755 release/bin/kflog $(DESTDIR)/$(INSTALL_ROOT)/bin
	cp -d release/lib/* $(DESTDIR)/$(INSTALL_ROOT)/lib
	$(MAKE) INSTALL_ROOT=$(DESTDIR)/$(INSTALL_ROOT) -f Makefile install
	$(MAKE) INSTALL_ROOT=$(DESTDIR)/$(INSTALL_ROOT) -f Makefile.qmake install_lang

# create a tar file from the kflog tree in $Home
.PHONY : make_tar

make_tar:	distclean
	tar jcf $(HOME)/kflog.tar.bz2 .

# copies change log and debian package to kflog web page
.PHONY : copy2web

copy2web:
	@echo "ARCHITECTURE=$(ARCHITECTURE)"
ifneq ($(ARCHITECTURE),amd64)
	# 32bit is assumed
	@rm -rf /tmp/kflog
	@mkdir -p /tmp/kflog
	@cp -p ChangeLog /tmp/kflog/ChangeLog_$(VERSION)
	@cp -p $(KFLOG_DEB_ROOT)/kflog_$(VERSION)_i386.changes /tmp/kflog/kflog_$(VERSION)_$(DIST_NAME)_$(DIST_REL)_i386.changes
	@cp -p $(KFLOG_DEB_ROOT)/kflog_$(VERSION)_i386.deb /tmp/kflog/kflog_$(VERSION)_$(DIST_NAME)_$(DIST_REL)_i386.deb
	scp -C /tmp/kflog/* web31_axel@kflog.org:/srv/www/web31/web/fileadmin/user_upload/kflog_downloads/src/
	@rm -rf /tmp/kflog
else
	# 64bit is assumed
	@rm -rf /tmp/kflog
	@mkdir -p /tmp/kflog
	@cp -p ChangeLog /tmp/kflog/ChangeLog_$(VERSION)
	@cp -p $(KFLOG_DEB_ROOT)/kflog_$(VERSION)_amd64.changes /tmp/kflog/kflog_$(VERSION)_$(DIST_NAME)_$(DIST_REL)_amd64.changes
	@cp -p $(KFLOG_DEB_ROOT)/kflog_$(VERSION)_amd64.deb /tmp/kflog/kflog_$(VERSION)_$(DIST_NAME)_$(DIST_REL)_amd64.deb
	scp -C /tmp/kflog/* web31_axel@kflog.org:/srv/www/web31/web/fileadmin/user_upload/kflog_downloads/src/
	@rm -rf /tmp/kflog
endif
